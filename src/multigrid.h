/*@ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 **
 **   Project      : LaMEM
 **   License      : MIT, see LICENSE file for details
 **   Contributors : Anton Popov, Boris Kaus, see AUTHORS file for complete list
 **   Organization : Institute of Geosciences, Johannes-Gutenberg University, Mainz
 **   Contact      : kaus@uni-mainz.de, popov@uni-mainz.de
 **
 ** ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ @*/
//---------------------------------------------------------------------------
//..................   GALERKIN GEOMETRIC MULTIGRID   .......................
//---------------------------------------------------------------------------
#ifndef __multigrid_h__
#define __multigrid_h__
//---------------------------------------------------------------------------

struct MatData;

//---------------------------------------------------------------------------

enum MGLevelType
{
	_LVL_MAT_FREE_,
	_LVL_ASSEMBLED_,
	_LVL_GALERKIN_

};
//---------------------------------------------------------------------------

// matrix-free interpolation context between the levels

struct MGInterp
{
	MatData *coarse; // coarse level evaluation context
	MatData *fine;   // fine level evaluation context
	Vec      wc;     // coarse grid work vector
	Vec      wf;     // fine grid work vector
};

//---------------------------------------------------------------------------

PetscErrorCode MGInterpCreate(MGInterp *mgi, MatData *coarse, MatData *fine);

PetscErrorCode MGInterpDestroy(MGInterp *mgi);

//---------------------------------------------------------------------------

// matrix-free preconditioner evaluation context

struct MatDataPC
{
	MatData *md; // matrix evaluation context
	Vec      D;  // diagonal of assembled preconditioner matrix
};
//---------------------------------------------------------------------------

PetscErrorCode MatDataPCCreate(MatDataPC *mdpc, MatData *md);

PetscErrorCode MatDataPCDestroy(MatDataPC *mdpc);

//---------------------------------------------------------------------------

// Galerkin multigrid level data structure

struct MGLevel
{
	MGLevelType type;   // level type
	PetscInt    ext_op; // external operator flag (top level)
	MatData    *md;     // matrix evaluation context
	MGInterp   *mgi;    // matrix-free interpolation context
	MatDataPC  *mdpc;   // matrix-free preconditioner context
	Mat         R, P;   // restriction & prolongation operators (not set on finest grid)
	//                     (matrix-free or assembled)
	Mat         A;      // linear operator (matrix-free, assembled or generated by Galerkin coarsening)
	//                     in any configuration there is only one assembled operator
	//                     the rest is either matrix-free or Galerkin

	// ******** fine level ************
	//     |                   ^
	//     R-matrix            |
	//     |                   P-matrix
	//     v                   |
	// ******** this level ************
} ;

//---------------------------------------------------------------------------

PetscErrorCode MGLevelCreate(MGLevel *lvl, MGLevel *fine, MatData *md);

PetscErrorCode MGLevelDestroy(MGLevel *lvl);

PetscErrorCode MGLevelSetupRestrict(MGLevel *lvl, MGLevel *fine);

PetscErrorCode MGLevelSetupProlong(MGLevel *lvl, MGLevel *fine);

//---------------------------------------------------------------------------

// setup row of restriction matrix
void getRowRestrict(
		PetscScalar parent,
		PetscInt    n,
		PetscInt    idx[],
		PetscScalar bc[],
		PetscScalar v[],
		PetscScalar vs[]);

// setup row of prolongation matrix
void getRowProlong(
		PetscInt    parent,
		PetscScalar parent_bc,
		PetscInt    n,
		PetscScalar bc[],
		PetscScalar v[],
		PetscScalar vs[]);

//---------------------------------------------------------------------------

struct MG
{
	// PETSc level numbering (inverse w.r.t. coarsening sequence):
	// 0   - coarse grid
	// n-1 - fine grid
	// R & P matrices connect with coarser level (i.e. not set on coarsest grid).
	// Coarsening step yields coarse grid operator. Own operator is prescribed.

	// LaMEM level numbering (natural w.r.t. coarsening sequence):
	// 0   - fine grid
	// n-1 - coarse grid
	// R & P matrices connect with finer level (i.e. not set on finest grid).
	// Coarsening step yields own operator. Fine level operator is prescribed.

	PC        pc;        // internal preconditioner context
	PetscInt  nlvl;      // number of levels
	PetscInt  nlmf;      // number of matrix-free levels
	MGLevel  *lvls;      // multigrid levels
	PetscInt  crs_setup; // coarse solver setup flag

};

//---------------------------------------------------------------------------

PetscErrorCode MGCreate(MG *mg, MatData *md, Mat A);

PetscErrorCode MGDestroy(MG *mg);

PetscErrorCode MGSetupCoarse(MG *mg, Mat A);

PetscErrorCode MGSetup(MG *mg, Mat A);

PetscErrorCode MGApply(PC pc, Vec x, Vec y);

PetscErrorCode MGGetNumLevels(MG *mg, MatData *md);

//---------------------------------------------------------------------------

// test codes
PetscErrorCode compareVecs(Vec va, Vec vb);
PetscErrorCode genRandVec(MatData *md, Vec *v);
PetscErrorCode VecSetBC(MatData *md, Vec v);
PetscErrorCode TestInterp(MatData *coarse, MatData *fine, Mat R, Mat P);
PetscErrorCode TestInterpBC(MatData *coarse, MatData *fine, Mat P);

//---------------------------------------------------------------------------
#endif
