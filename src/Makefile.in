#==============================================================================
#
#   Project      : LaMEM
#   License      : MIT, see LICENSE file for details
#   Contributors : Anton Popov, Boris Kaus, see AUTHORS file for complete list
#   Organization : Institute of Geosciences, Johannes-Gutenberg University, Mainz
#   Contact      : kaus@uni-mainz.de, popov@uni-mainz.de
#
#==============================================================================

# Define compilation mode
# deb - debug 
# opt - optimized (default)

mode = opt

#====================================================

# Define additional warning & dependency generation flags (compiler-dependent)

PLATFORM = $(shell uname -m)


# IBM machine (XLC compiler assumed)
ifeq ($(PLATFORM), ppc64)
	LAMEM_FLAGS += -qmakedep=gcc -qinfo=nouse
endif

# Intel or AMD machine
ifeq ($(PLATFORM), x86_64)
   # Detect compilers
   ifneq ($(shell mpicc -v 2>&1 | grep -c pgcc), 0)
      # PORTLAND GROUP
      DEPEN_FLAGS = -MM
   endif
   ifneq ($(shell mpicc -v 2>&1 | grep -c icc), 0)
      # INTEL
      DEPEN_FLAGS = -MM
   endif
   ifneq ($(shell mpicc -v 2>&1 | grep -c gcc), 0)
      # GNU
      DEPEN_FLAGS = -MM
      LAMEM_FLAGS += -std=c++11 -Wall -W \
      -Wconversion -Wunused-but-set-variable -Wpointer-arith \
      -Wcast-align -Wwrite-strings -Winline -Wno-sign-conversion \
      -Wno-unused-result -Wno-inline
   endif
   ifneq ($(shell mpicc -v 2>&1 | grep -c apple), 0)
      # GNU
      DEPEN_FLAGS = -MM
      LAMEM_FLAGS += -std=c++11  -pedantic -Wall -W -Wmissing-prototypes \
      -Wconversion -Wunused-but-set-variable -Wpointer-arith \
      -Wcast-align -Wwrite-strings -Winline -Wno-sign-conversion \
      -Wno-unused-result -Wno-inline
   endif   
endif

# These are for BinaryBuilder compilations
ifeq (,$(findstring $PLATFORM, aarch64 armv6l armv7l i686 powerpc64le amd64))
   ifneq ($(shell mpicc -v 2>&1 | grep -c gcc), 0)
      # GNU
      DEPEN_FLAGS = -MM
      LAMEM_FLAGS += -std=c++11 -Wall -W \
      -Wconversion -Wunused-but-set-variable -Wpointer-arith \
      -Wcast-align -Wwrite-strings -Winline -Wno-sign-conversion \
      -Wno-unused-result -Wno-inline
   endif
   ifneq ($(shell mpicc -v 2>&1 | grep -c clang), 0)
      DEPEN_FLAGS = -MM
      LAMEM_FLAGS = -std=c++11  -pedantic -Wall -W -Wmissing-prototypes \
      -Wconversion -Wunused-but-set-variable -Wpointer-arith \
      -Wcast-align -Wwrite-strings -Winline -Wno-sign-conversion \
      -Wno-unused-result -Wno-inline
   endif   
   ifneq ($(shell mpicc -v 2>&1 | grep -c apple), 0)
      # GNU
      DEPEN_FLAGS = -MM
      LAMEM_FLAGS = -std=c++11  -pedantic -W  \
      -Wconversion -Wunused-but-set-variable -Wpointer-arith \
      -Wcast-align -Wwrite-strings -Winline -Wno-sign-conversion \
      -Wno-unused-result -Wno-inline
   endif   
   ifneq ($(shell mpicc -v 2>&1 | grep -c freebsd), 0)
      # GNU
      DEPEN_FLAGS = -MM
      LAMEM_FLAGS = -std=c++11 -Wall -W \
      -Wconversion -Wunused-but-set-variable -Wpointer-arith \
      -Wcast-align -Wwrite-strings -Winline -Wno-sign-conversion \
      -Wno-unused-result -Wno-inline
   endif
   ifneq ($(shell mpicc -v 2>&1 | grep -c musl), 0)
      # GNU
      DEPEN_FLAGS = -MM
      LAMEM_FLAGS = -std=c++11  -pedantic -W  \
      -Wconversion -Wunused-but-set-variable -Wpointer-arith \
      -Wcast-align -Wwrite-strings -Winline -Wno-sign-conversion \
      -Wno-unused-result -Wno-inline
   endif   
endif

# Add debug command if in debug mode
ifeq ($(mode), deb)
   LAMEM_FLAGS += -g
endif

# Add extrae directory if variable EXTRAE_HOME is defined
ifdef EXTRAE_HOME
	LAMEM_FLAGS += -I${EXTRAE_HOME}/include
endif

# Windows requires this linker flag
UNAME := $(shell uname)
ifneq ($(filter MSYS%,$(UNAME)),)
CLIB_FLAGS = -lssp
endif

#====================================================

# Environment required for documentation 
# Define paths to most current pdflatex and bibtex implementation

PDFLATEX = $(shell which pdflatex)
BIBTEX = $(shell which bibtex)

#====================================================

