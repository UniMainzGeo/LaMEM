# ----------------------------------------------------------------------------------------------------------------------
# A basic parameter file for FDSTAG Canonical setup for subduction
# NOTE: use CreateMarkers_Subduction.m to generate the input geometry
# ----------------------------------------------------------------------------------------------------------------------

# Define number of elements in x, y, z-direction
# Negative number implies corresponding number of mesh segments
# Data is provided in the variables seg_x, seg_y, seg_z and includes:
#    * coordinates of the delimiters between the segments (n-1 points)
#    * number of cells                                    (n points)
#    * bias coefficients                                  (n points) 
 
  
nel_x						=   128    
nel_y						= 	128    
nel_z						=   2 


# Geometry
units                           =	geo
Characteristic.Length			=	1000e3 # [m]				
Characteristic.Viscosity 		=	1e20   # [Pa s]	
Characteristic.Temperature		=	1000   # [K]		
Characteristic.Stress      		=   1e12   # [Pa]			

W								=	100			   # Width  (x-direction)
L								=   100			   # Length (y-direction)
H								=	2			   # Height (z-direction)

x_left							=	0              # Left side of domain
y_front							=	0              # Front side of domain
z_bot							=	-2             # Bottom of box

# Phase distribution
NumPartX						=	3   # Particles/Cell in x-direction
NumPartY						=	3   # Particles/Cell in y-direction
NumPartZ						=	3	# Particles/Cell in z-direction

# Properties that are defined over the whole domain:
Gravity							=  -10;			# [m/s2] - gravitational acceleration 

# --- Model setup and noise ---
msetup                        	= parallel 
ParticleFilename              	= Particles 	#File that contains markers distribution (matlab)
LoadInitialParticlesDirectory 	= MatlabInputParticles  

# Define input/output and numerics-related stuff
OutputFile					=	bezier		
save_timesteps				=	10              # save every ? timesteps
time_end					=	2001			# last timestep
save_breakpoints 			=	50
CFL							=	0.5				# CFL, dt-based criterium
dt_max						=	0.1	  	   		# Maximum timestep [Myrs]
	
Temp_top	    			=   0				# Temperature @ top
Temp_bottom					=   10              # Temperature @ bottom; side BC's are flux-free



# ----------------------------------------------------
# Pushing Boundary Conditions by Adina, Sep.9,2015
# ----------------------------------------------------

AddBezier 					=	1

<BezierBlockStart>
BezierID 				=	0		# block id
npath 					=   3		# number of path points of Bezier curve
time 					=	0 0.5 1 # time at path points
theta 					=	30 60 90 # orientation angles at path points (counter-clockwise positive)
path 					=	35.9 46.67 21.52 47.35 17.0 75.18 51.26 72.64 85.55 69.30 85.0 54.3 73.93 34.97 # bezier curve path & control points (6*npath-4 are expected)
# polygon
npoly 					=	4       # number of polygon vertices
poly                    =   31 42 41 42 42 52 31 52 # polygon x-y coordinates at initial time
bot 					=	-2 # polygon bottom coordinate
top						=	0  # polygon top coordinate
<BezierBlockEnd>

<BezierBlockStart>
BezierID 				=	1
npath 					=   3	
time 					=	0 0.5 1
theta 					=	10 60 120
path 					=	29.9 26.0 22.5 24.6 11.85 16.6 23.3 12.6 48.75 3.75 67.75 11.25 62.0 21.0
# polygon
npoly 					=	4
poly                    =   27.5 23.5 32.5 23.5 32.5 28.5 27.5 28.5
bot 					=	-2
top						=	0
<BezierBlockEnd>


#===============================================================================
# ............................ PETSc options ...................................
#===============================================================================

<PetscOptionsStart>

	# If you have a non-linear system just switch off the option 	-snes_type ksponly and tune the solver options
    # From Adina: July 21,2015

	# SNES (nonlinear) options
	-snes_ksp_ew			# Eisenstat Walker algorithm
	-snes_ksp_ew_rtol0 1e-3
	-snes_ksp_ew_rtolmax 1e-3
	#-snes_ksp_ew_gamma
	-snes_npicard 2			# 2 picard iterations @ beginning of ever timestep
	-snes_monitor			
	-snes_atol 1e-4
	-snes_rtol 1e-4
	-snes_stol 1e-16
	-snes_max_it 30 
	-snes_max_funcs 500000
	-snes_max_linear_solve_fail 10000
	-snes_type ksponly

	# Newton/picard options
	-snes_PicardSwitchToNewton_rtol 1e-2 		# relative tolerance to switch to Newton (1e-2)
	-snes_NewtonSwitchToPicard_it  	20		# number of Newton iterations after which we switch back to Picard 
	-snes_NewtonSwitchToPicard_rtol 1.1		# relative tolerance compared to first iteration step 

	# Linesearch options
	-snes_linesearch_monitor
	-snes_linesearch_type l2 			#Linesearch type (one of) shell basic l2 bt cp (SNESLineSearchSetType)  [l2 seems to work better with VEP]
	-snes_linesearch_maxstep 1.0			# very important to prevent the code from "blowing up"
	
	# Jacobian (linear) outer KSP
	-js_ksp_type fgmres
#	-js_ksp_gmres_restart 100
	-js_ksp_max_it 30 
	-js_ksp_converged_reason
	-js_ksp_monitor
	-js_ksp_rtol 1e-5
	-js_ksp_atol 1e-4

	# Matrix type
	-pcmat_type mono			# monolithic matrix [coupled MG solver]
	-pcmat_no_dev_proj          # Assume that the material is fully incompressible (converges faster)
	-jp_type mg					# multigrid 

	# Multigrid preconditioner settings
	-gmg_pc_type mg
	-gmg_pc_mg_levels 2			# 5 MG levels, gives coarse grid of 32x16x8	
	-gmg_pc_mg_galerkin			# 	
	-gmg_pc_mg_type multiplicative
	-gmg_pc_mg_cycle_type v
	#-gmg_pc_view 
	-gmg_pc_mg_log				# monitors time spend in multigrid if using -log_summary @ the end
	
	
	# RICHARDSON/JACOBI MG Smoothener - [Anton's favorite options]
	-gmg_mg_levels_ksp_type richardson
	-gmg_mg_levels_ksp_richardson_scale 0.5
	-gmg_mg_levels_pc_type jacobi
	-gmg_mg_levels_ksp_max_it 10 
	

	# DIRECT, REDUNDANT COARSE SOLVER
   -crs_ksp_type preonly
   -crs_pc_type redundant
	-crs_pc_redundant_number 1								# split domain in 4 pieces so ever direct solver step is done on 512 cores
	-crs_redundant_pc_factor_mat_solver_package superlu_dist		# uses mumps as local direct solver	[superlu_dist is another option]

	### LATEST additions
	-InitViscosity 1e20 
#	-use_quasi_harmonic_viscosity 
	-div_tol 1e2   # 5e-1


 
# pesuo-2D simulation, no refine(MG) in Y direction
	#-da_refine_y 1

	# set lithostatic pressure(density)
	-rho_lithos 3250

# Additional command-line Petsc Options
	-use_fdstag_canonical # tell LaMEM to use the new LaMEM version,important!
#	-restart 1 
#	-SavePartitioning
# Logfiles
    -res_log 1

# advect with RK4
    -new_advection
	-advection 2
	-velinterp 2


# Shift pressure (P=0 at surface)
	-shift_press

# marker control
    -use_marker_control

-markers_max 100

# activate temperature diffusion
#-act_temp_diff

# variable background strain rate

	#-ExxNumPeriods  1
	#-ExxTimeDelims  100.0
	#-ExxStrainRates -1e-14

	#-EyyNumPeriods  1
	#-EyyTimeDelims  100.0
	#-EyyStrainRates -1e-15


# internal free surface
	#-surf_use        1
	#-surf_level      0
	#-surf_air_phase  0
	#-surf_max_angle  45.0
	#-FSSA 1.0 

	-out_surf_pvd        1
	-out_surf_velocity   1
	-out_surf_topography 1
	-out_surf_amplitude  1

	#-out_plast_dissip 1
	-out_pvd 1
	-out_phase 1  
	-out_density 1
	-out_viscosity 1
	-out_velocity 1
	-out_pressure 1
    -out_dev_stress 1
    -out_j2_dev_stress 1
    -out_strain_rate 1
    -out_j2_strain_rate 1
    -out_temperature 1
    -out_plast_strain 1
    -out_tot_strain 1
    #-out_vorticity  1
    -out_ang_vel_mag 1
    -out_shmax 1
    -out_isa 1
    -out_gol 1
    -out_tot_displ 1
    -out_moment_res 1
    -out_cont_res 1


	#-out_markers 1
	#-out_mark_pvd 1

    	#-out_avd 1
    	#-out_avd_ref 3
    	#-out_avd_pvd 1

<PetscOptionsEnd>



# viscosity cutoff and initial strain-rate guess
LowerViscosityCutoff			=	1e19
UpperViscosityCutoff			=	1e23
DII_ref                         = 	1e-15    





#===============================================================================
# ............................ Material Parameters .............................
#===============================================================================

    


# ------------------- Matrix-------------------
	<MaterialStart>
		ID   	= 	0
		rho0	= 	3000

	# creep
        eta     =   1e20
	<MaterialEnd>


# ------------------- block -------------------
	<MaterialStart>
	ID   	= 	1
	rho0	= 	3000

	# creep
    eta     =   1e21
	<MaterialEnd>
	
# End of defining material properties for all phases ----------------------------------------
