Installation of PETSC with Eclipse on El Capitan 

[as done by Boris in jan. 2016]


————————————————————
1) MacPorts installations
 
a) Install gcc 5.0 from MacPorts. You might have to install and/or update Macports before that.
You can check available packages with:
 
port search gcc

In my case, I installed gcc 5 with: 

port install gcc5

Make sure that this gcc is actually selected, as you might have older installations present:

MacBook-BorisKaus-5:~ kausb$ port select gcc
Available versions for gcc:
	mp-gcc47
	mp-gcc5 (active)
	none


b) install MPICH for the same gcc compiler with:

port install mpich-gcc5

and make sure that this version is selected. 
The corresponding library directory is:

/opt/local/lib/mpich-gcc5

and the binaries can be found in

/opt/local/bin/mpicc-mpich-gcc5
/opt/local/bin/mpicxx-mpich-gcc5
/opt/local/bin/mpif90-mpich-gcc5


————————————————————
2) Install PETSC

The current version of LaMEM is still running PETSc 3.5.4.

a) Make sure that there are no “leftover” mpi files from other/older MPI installations 

b) Set the directory:
export PETSC_DIR=$PWD from the petsc directory

c) Install PETSc with:

OPTIMIZED:
./config/configure.py --configModules=PETSc.Configure --optionsModule=PETSc.compilerOptions --configModules=PETSc.Configure --optionsModule=PETSc.compilerOptions --configModules=PETSc.Configure --optionsModule=PETSc.compilerOptions --prefix=/opt/petsc/petsc-3.5.4-int32-opt --download-fblaslapack=1 --with-debugging=0 --COPTFLAGS=-O3 --FOPTFLAGS=-O3 --CXXOPTFLAGS=-O3 --with-large-file-io=1 --with-shared-libraries=0 --download-metis=1 --download-parmetis=1 --download-ml=1 --download-hypre=1 --download-scalapack=1 --download-mumps=1 --download-superlu_dist=1 --with-mpi-dir=/opt/local/lib/mpich-gcc5 --with-cc=/opt/local/bin/mpicc-mpich-gcc5 --with-fc=/opt/local/bin/mpif90-mpich-gcc5 --with-cxx=mpicxx-mpich-gcc5


DEBUG:
./config/configure.py --configModules=PETSc.Configure --optionsModule=PETSc.compilerOptions --configModules=PETSc.Configure --optionsModule=PETSc.compilerOptions --configModules=PETSc.Configure --optionsModule=PETSc.compilerOptions --prefix=/opt/petsc/petsc-3.5.4-int32-deb --download-fblaslapack=1 --with-debugging=1 --COPTFLAGS="-g -O0" --FOPTFLAGS="-g -O0" --CXXOPTFLAGS="-g -O0" --with-large-file-io=1 --with-shared-libraries=0 --download-metis=1 --download-parmetis=1 --download-ml=1 --download-hypre=1 --download-scalapack=1 --download-mumps=1 --download-superlu_dist=1 --with-mpi-dir=/opt/local/lib/mpich-gcc5 --with-cc=/opt/local/bin/mpicc-mpich-gcc5 --with-fc=/opt/local/bin/mpif90-mpich-gcc5 --with-cxx=mpicxx-mpich-gcc5


Things should compile fine. Remember that you might need to use “sudo” to install the final code and use your root password.

————————————————————
3) Install Eclipse PTP

This is the easy part. 

After making sure that the correct version of java is installed (1.7 or higher; check using “java -version”),

I downloaded Eclipse For Parallel Application Developers from 

	http://www.eclipse.org/downloads/

and dragged the Eclipse icon to the /Applications directory.


————————————————————
4) Create and test a “Hello World” MPI project
 
We will first make sure that we can create and run a simple hello world MPI project.
I followed the Eclipse help instructions, to create a local hello world project, which are quite extensive, so I won’t repeat them here. 

Running this on one and multiple processors should work, provided that you indicate the directories where the binaries and library are located. 


————————————————————
5) Getting the GDB compiler 

Debugging using Eclipse requires the GDB debugger. One can install that using Macports. 

For me it was working at some stage with sudo gdb ./MyMPIProgram, but not without the sudo.
Yet, that is required for eclipse.  

The reason for this is that the latest MAC security protocols (SIP) makes this rather tricky. You have to codesign the gdb binary, and you can test if it works by running an application from the command-line.
There are quite a few pages that explain how to codesign an application (google).
Yet, a missing step at the end was this one:

sudo dseditgroup -o edit -a YOUR_USER_NAME -t user procmod

after which it worked and serial debugging from eclipse worked as well.
For most of your coding this is actually ok.

————————————————————
6) Parallel debugging

I tried for a while but gave up. If you find out how to do this, let us know!





