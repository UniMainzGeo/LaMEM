PETSc 3.7.0 installation instructions on JUQUEEN IBM BLUE GENE/P 

(27/04/16 by Boris Kaus)



============================================================================
1) Login to Juqueen, using the machine for which you uploaded the ssh_id file
	ssh YOUR_LOGIN_NAME@juqueen.fz-juelich.de
	
Note that YOU_LOGIN_NAME is not your usual login name but rather something you have been given in an email from Juelich. 


2) Modify .profile to include Petsc directories
   After modification logout and login again for changes to take effect


	# ======================
	# PETSC 3.7.0 
	# ======================
	export PETSC_DIR=${HOME}/LIB/petsc-3.7.0


============================================================================
3) Copy petsc-3.7.0.tar to /LIB/
	untar the file with”
	
	tar -xvf petsc-3.7.0.tar

============================================================================
4) Enter directory and configure Petsc (using hypre and superlu_dist coarse solver, but not with ML)

	a) use ./configure --help to show all configuring options

	b) put "export PATH=$PATH:/usr/local/cmake/bin" to .profile, save, logout, login again, continue
	
	c) cd $PETSC_DIR

		1) copy the file JUQUEEN_OPT.py to ./config 
			Make sure that the file can be executed (if necessary change this with chmod +x JUQUEEN_OPT.py)	
			Also make sure that it refers to the correct directory in the beginning.	

		2) run the installation with:
	
		./config/JUQUEEN_OPT.py

		This will install petsc with MUMPS, hypre, superlu_dist but NOT with ML (see special instructions by Anton if you need this)
	
	
		3) If you want to install it with 64bit indices copy the file JUQUEEN_OPT_64bit.py to ./config and run the installation with:
	
		./config/JUQUEEN_OPT_64bit.py
		
		This will install petsc with HYPRE and superlu_dist but WITHOUT MUMPS and ML (which don’t work with 64 bit currently).
	
	
	
============================================================================
5) Run configuration executable from Petsc directory


	a) create a submission file "run_conftest.job":

		----------------------------------------------------------------------
		# @ job_name = run_conftest
		# @ comment = "run_conftest"
		# @ error = $(job_name).$(jobid).out
		# @ output = $(job_name).$(jobid).out
		# @ environment = COPY_ALL
		# @ wall_clock_limit = 00:10:00
		# @ notification = always
		# @ notify_user = your@mail.address
		# @ job_type = bluegene
		# @ bg_size = 32
		# @ queue
		
		
		# use --np TO SPECIFY THE TOTAL NUMBER OF PROCESSORS
		runjob --np 1 --ranks-per-node 1 --exe conftest-JUQUEEN_OPT
		-----------------------------------------------------------------------

	b) submit you job
	
		llsubmit run_conftest.job


	c) you can see whether it's done or not with "llq -u <username>"
	
	
	
============================================================================	
6) Wait for completion and finalize configuration
	
	./reconfigure-JUQUEEN_OPT.py
	
			
============================================================================
7) Compile PETSc library

	Follow the instructions given by PETSc

============================================================================
8) Make sure to define 

PETSC_OPT as an environmental variable in your profile, as LaMEM needs that.

============================================================================
9) Installing LaMEM

run “make mode=opt all” in the /src directory of LaMEM


============================================================================
10) Test Petsc installation
*** please review this part *******************

	For instance, use examples contributed by D. May
	a) cd $PETSC_DIR/src/ksp/ksp/examples/tutorials/
	b) make ex42
	c) create a job file:
		touch test_petsc_ex42.job:
		
		--------------------------------------------------------------------
		# @ job_name = petsc_test
		# @ comment = "petsc_test"
		# @ error = $(job_name).$(jobid).out
		# @ output = $(job_name).$(jobid).out
		# @ environment = COPY_ALL
		# @ wall_clock_limit = 00:10:00
		# @ notification = always
		# @ notify_user = your@mail.address
		# @ job_type = bluegene
		# @ bg_size = 32
		# @ queue
	
		# use --np TO SPECIFY THE TOTAL NUMBER OF PROCESSORS
		runjob --ranks-per-node 1 --exe ex42 --args -options_file ex42-fsschur.opts
		--------------------------------------------------------------------
		
		>>> also try different optionfiles:
					
			ex42-mgfs2.opts
			ex42-mgfs.opts
			ex42-mgschur_nestedfs.opts
			ex42-mgschur.opts 
************************************************

