#===============================================================================
# Scaling
#===============================================================================

	units = geo

	unit_temperature = 1.0
	unit_length      = 1e4
	unit_viscosity   = 1e20
	unit_stress      = 1e8

#===============================================================================
# Time stepping parameters
#===============================================================================

	dt        = 1.5e-3 # time step
	dt_min    = 2e-5   # minimum time step (declare divergence if lower value is attempted)
	dt_max    = 5e-3   # maximum time step
	inc_dt    = 0.1    # time step increment per time step (fraction of unit)
	CFL       = 0.1    # CFL (Courant-Friedrichs-Lewy) criterion
	CFLMAX    = 0.1    # CFL criterion for elasticity
	nstep_max = 1000    # maximum allowed number of steps (lower bound: time_end/dt_max)
	nstep_out = 20     # save output every n steps

#===============================================================================
# Grid & discretization parameters
#===============================================================================

# Number of cells for all segments

	nel_x = 128
	nel_y = 2
	nel_z = 64

# Coordinates of all segments (including start and end points)

	coord_x = -40.0  40.0
	coord_y =  0.0   0.625
	coord_z =  -30   20.0

#===============================================================================
# Free surface
#===============================================================================

	surf_use           = 1                # free surface activation flag
	surf_corr_phase    = 1                # air phase ratio correction flag (due to surface position)
	surf_level         = 0.0              # initial level
	surf_air_phase     = 0                # phase ID of sticky air layer
	surf_max_angle     = 45.0             # maximum angle with horizon (smoothed if larger)
# default

#===============================================================================
# Boundary conditions
#===============================================================================

# Background strain rate parameters

	exx_num_periods  = 1      # number intervals of constant strain rate (x-axis)
	exx_strain_rates = -1e-15 # strain rates for each interval

# Free surface top boundary flag

	open_top_bound = 1

    temp_top                =   20.0
    temp_bot                =   800.0                              # if only one value is given, it is assumed to be constant with time
#===============================================================================
# Jacobian & residual evaluation parameters
#===============================================================================

	gravity        = 0.0 0.0 -9.81  # gravity vector
	FSSA           = 1.0            # free surface stabilization parameter [0 - 1]
	act_temp_diff   = 1              # temperature diffusion activation flag
        shear_heat_eff  = 0.5            # shear heating efficiency parameter   [0 - 1]
	init_guess     = 1              # initial guess flag
	p_lim_plast    = 1              # limit pressure at first iteration for plasticity
	eta_min        = 1e18          # viscosity upper bound
	eta_max        = 1e24           # viscosity lower limit
	eta_ref        = 1e22           # reference viscosity (initial guess)
	min_cohes      = 1e6            # cohesion lower bound
	min_fric       = 5.0            # friction lower bound
	tau_ult        = 1e9            # ultimate yield stress
	init_lith_pres  = 1              # initial pressure with lithostatic pressure (stabilizes compressible setups in the first steps)
	Compute_velocity_gradient = 1    # compute the velocity gradient tensor 1: active, 0: not active. If active, it automatically activates the output in the .pvd file

#===============================================================================
# Solver options
#===============================================================================
	SolverType 		=	direct 			# solver [direct or multigrid]
	DirectSolver 	=	mumps			# mumps/superlu_dist/pastix	
	DirectPenalty 	=	1e3


#===============================================================================
# Model setup & advection
#===============================================================================

	msetup         = geom              # setup type
	nmark_x        = 5                 # markers per cell in x-direction
	nmark_y        = 5                 # ...                 y-direction
	nmark_z        = 5                 # ...                 z-direction
	rand_noise     = 0                 # random noise flag
	bg_phase       = 1                 # background phase ID

	# Geometric primitives:

	<LayerStart>
		phase  = 0     # Air layer
		top    = 20.0
		bottom = 0.0
		Temperature = constant # optional: Temperature structure. possibilities: [constant, linear, halfspace]
		cstTemp     = 20      # required in case of [constant]: temperature value [in Celcius in case of GEO units]
	<LayerEnd>

	<LayerStart>
		phase       = 1
		top         = 0.0
		bottom      = -30.0
		Temperature = constant  # optional: Temperature structure. possibilities: [constant, linear, halfspace]
	        cstTemp     = 800    # required in case of [constant]: temperature value [in Celcius in case of GEO units]
	<LayerEnd>
	<BoxStart>        # Weak inclusion
		phase  = 2
		# box bound coordinates: left, right, front, back, bottom, top
		bounds = -5.0 5.0   0.0 1.0   -30.0 -25.0
		Temperature = constant  # optional: Temperature structure. possibilities: [constant, linear, halfspace]
		cstTemp     = 1000    # required in case of [constant]: temperature value [in Celcius in case of GEO units]
	<BoxEnd>

#===============================================================================
# Output
#===============================================================================

# Grid output options (output is always active)

	out_file_name       = test_vep_analytical # output file name
	out_pvd             = 1                   # activate writing .pvd file
	out_phase           = 1
	out_density         = 1
	out_visc_total      = 1
	out_velocity        = 1
	out_pressure        = 1
	out_dev_stress      = 1
	out_j2_dev_stress   = 1
	out_strain_rate     = 1
	out_j2_strain_rate  = 1
	out_plast_strain    = 1
	out_plast_dissip    = 1
	out_moment_res      = 1
	out_cont_res        = 1
	out_Def_Work = 1
out_Def_ratDif_Work = 1
out_Def_ratDis_Work = 1
out_Def_ratPl_Work = 1
out_Dam_eff = 1
out_Dam_pot = 1
 
                out_temperature           = 1 
	out_rel_dif_rate    = 1
	out_rel_dis_rate    = 1
# AVD phase viewer output options (requires activation)

	out_avd     = 1 # activate AVD phase output
	out_avd_pvd = 1 # activate writing .pvd file
	out_avd_ref = 1 # AVD grid refinement factor

#===============================================================================
# Material phase parameters
#===============================================================================

	# Strain softening parameters

	<SofteningStart>
		ID   = 0
		A    = 0.25
		APS1 = 0.00001
		APS2 = 0.01
	<SofteningEnd>
	<ViscousWeakStart>
		ID   		= 0   	# softening law ID
		Weakening_Type = _Linear_ # _Logistic_Type_, (or Hyperbolic_Tangent_type_), _Grain_Size_
		ADVW1           = 0.0
		ADVW2           = 1.0 #(Joule, need to discuss within which range we should do)
		WDR             = 0.9999     # order of magnitude to weaken the viscosity
		##########
		#Place Holder Logistic/hyperbolic tangent grain size parameter 
		##########
	<ViscousWeakEnd>
	
	
	<Work_Damage_CEStart>
		ID = 0
		Healing = 1
		DW_Ref = 200e3
		D_Ref  = 0.8 
		Heal_exp = 1.0
		T_ref_Hel = 100
		Ref_Heal  = 1e-25
		E_heal    = 100e3
	<Work_Damage_CEEnd>
	
	<MaterialStart>
		ID         = 0      # phase id  [-]
		rho        = 100    # density - if dimensional [kg/m3]
		eta        = 1e21   # Viscosity - dimensional [Pa.s]
		G          =  5e10
		k          = 3
		Cp         = 1e6
		Kb         =  8e10
		ch         =  50e6
		fr         =  30
		frSoftID   =  0     # softening ID
		chSoftID   =  0
	<MaterialEnd>

	# Inclusion


	# Matrix
	<MaterialStart>
		ID        =  1    # phase id  [-]
		rho       =  2700 # density - if dimensional [kg/m3]
		diff_prof  = Wet_Olivine_diff_creep-Hirth_Kohlstedt_2003_constant_C_OH # DIFFUSION creep profile
		#disl_prof  = Dry_Olivine_disl_creep-Hirth_Kohlstedt_2003 # DIFFUSION creep profile
		G         =  5e10
		Kb        =  8e10
		k         =  0.5
		Cp        = 1050
                DiffWID    = 0 
		ch         =  50e6
		fr         =  30
		frSoftID   =  0     # softening ID
		chSoftID   =  0
	<MaterialEnd>

	<MaterialStart>
		ID         = 2     # phase id  [-]
		rho        = 2700  # density - if dimensional [kg/m3]
		diff_prof  = Wet_Olivine_diff_creep-Hirth_Kohlstedt_2003_constant_C_OH # DIFFUSION creep profile
		#disl_prof  = Dry_Olivine_disl_creep-Hirth_Kohlstedt_2003 # DIFFUSION creep profile
		G          =  5e10
		Kb         =  8e10
		k          = 0.5 
		Cp         = 1050
                DiffWID    = 0 
		ch         =  50e6
		fr         =  30
		frSoftID   =  0     # softening ID
		chSoftID   =  0
	<MaterialEnd>
	# sticky-air layer

#===============================================================================
# PETSc options
#===============================================================================
<PetscOptionsStart>
	
	# Eisenstatt-Walker (sometimes converges faster for nonlinear cases)
	-snes_ksp_ew
    -snes_ksp_ew_rtolmax 1e-1
    -snes_max_linear_solve_fail 10000
 	-snes_max_it 			100
	
	-pcmat_pgamma 1e2
   		
	# Newton/picard options
	-snes_PicardSwitchToNewton_rtol 1e-2   # relative tolerance to switch to Newton (1e-2)
	-snes_NewtonSwitchToPicard_it  	20     # number of Newton iterations after which we switch back to Picard

	# Linesearch options
	-snes_linesearch_type 		l2 				#Linesearch type (one of) shell basic l2 bt cp (SNESLineSearchSetType) 
	-snes_linesearch_maxstep 	1.0				# very important to prevent the code from "blowing up"
	
	
	# Jacobian solver
	-js_ksp_type fgmres	
	-js_ksp_max_it 50

<PetscOptionsEnd>

#===============================================================================
